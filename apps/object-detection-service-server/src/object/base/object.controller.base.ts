/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ObjectService } from "../object.service";
import { ObjectCreateInput } from "./ObjectCreateInput";
import { Object } from "./Object";
import { ObjectFindManyArgs } from "./ObjectFindManyArgs";
import { ObjectWhereUniqueInput } from "./ObjectWhereUniqueInput";
import { ObjectUpdateInput } from "./ObjectUpdateInput";
import { CountFindManyArgs } from "../../count/base/CountFindManyArgs";
import { Count } from "../../count/base/Count";
import { CountWhereUniqueInput } from "../../count/base/CountWhereUniqueInput";
import { DetectionFindManyArgs } from "../../detection/base/DetectionFindManyArgs";
import { Detection } from "../../detection/base/Detection";
import { DetectionWhereUniqueInput } from "../../detection/base/DetectionWhereUniqueInput";

export class ObjectControllerBase {
  constructor(protected readonly service: ObjectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Object })
  async createObject(@common.Body() data: ObjectCreateInput): Promise<Object> {
    return await this.service.createObject({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Object] })
  @ApiNestedQuery(ObjectFindManyArgs)
  async objects(@common.Req() request: Request): Promise<Object[]> {
    const args = plainToClass(ObjectFindManyArgs, request.query);
    return this.service.objects({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Object })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async object(
    @common.Param() params: ObjectWhereUniqueInput
  ): Promise<Object | null> {
    const result = await this.service.object({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Object })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateObject(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() data: ObjectUpdateInput
  ): Promise<Object | null> {
    try {
      return await this.service.updateObject({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Object })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteObject(
    @common.Param() params: ObjectWhereUniqueInput
  ): Promise<Object | null> {
    try {
      return await this.service.deleteObject({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/counts")
  @ApiNestedQuery(CountFindManyArgs)
  async findCounts(
    @common.Req() request: Request,
    @common.Param() params: ObjectWhereUniqueInput
  ): Promise<Count[]> {
    const query = plainToClass(CountFindManyArgs, request.query);
    const results = await this.service.findCounts(params.id, {
      ...query,
      select: {
        count: true,
        createdAt: true,
        id: true,

        object: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/counts")
  async connectCounts(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() body: CountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      counts: {
        connect: body,
      },
    };
    await this.service.updateObject({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/counts")
  async updateCounts(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() body: CountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      counts: {
        set: body,
      },
    };
    await this.service.updateObject({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/counts")
  async disconnectCounts(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() body: CountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      counts: {
        disconnect: body,
      },
    };
    await this.service.updateObject({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/detections")
  @ApiNestedQuery(DetectionFindManyArgs)
  async findDetections(
    @common.Req() request: Request,
    @common.Param() params: ObjectWhereUniqueInput
  ): Promise<Detection[]> {
    const query = plainToClass(DetectionFindManyArgs, request.query);
    const results = await this.service.findDetections(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        object: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/detections")
  async connectDetections(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() body: DetectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detections: {
        connect: body,
      },
    };
    await this.service.updateObject({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/detections")
  async updateDetections(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() body: DetectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detections: {
        set: body,
      },
    };
    await this.service.updateObject({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/detections")
  async disconnectDetections(
    @common.Param() params: ObjectWhereUniqueInput,
    @common.Body() body: DetectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detections: {
        disconnect: body,
      },
    };
    await this.service.updateObject({
      where: params,
      data,
      select: { id: true },
    });
  }
}
