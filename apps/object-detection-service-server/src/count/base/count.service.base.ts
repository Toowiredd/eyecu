/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Count as PrismaCount,
  Object as PrismaObject,
} from "@prisma/client";

export class CountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CountCountArgs, "select">): Promise<number> {
    return this.prisma.count.count(args);
  }

  async counts(args: Prisma.CountFindManyArgs): Promise<PrismaCount[]> {
    return this.prisma.count.findMany(args);
  }
  async count(args: Prisma.CountFindUniqueArgs): Promise<PrismaCount | null> {
    return this.prisma.count.findUnique(args);
  }
  async createCount(args: Prisma.CountCreateArgs): Promise<PrismaCount> {
    return this.prisma.count.create(args);
  }
  async updateCount(args: Prisma.CountUpdateArgs): Promise<PrismaCount> {
    return this.prisma.count.update(args);
  }
  async deleteCount(args: Prisma.CountDeleteArgs): Promise<PrismaCount> {
    return this.prisma.count.delete(args);
  }

  async getObject(parentId: string): Promise<PrismaObject | null> {
    return this.prisma.count
      .findUnique({
        where: { id: parentId },
      })
      .object();
  }
}
