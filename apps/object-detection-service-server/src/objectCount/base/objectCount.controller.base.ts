/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ObjectCountService } from "../objectCount.service";
import { ObjectCountCreateInput } from "./ObjectCountCreateInput";
import { ObjectCount } from "./ObjectCount";
import { ObjectCountFindManyArgs } from "./ObjectCountFindManyArgs";
import { ObjectCountWhereUniqueInput } from "./ObjectCountWhereUniqueInput";
import { ObjectCountUpdateInput } from "./ObjectCountUpdateInput";

export class ObjectCountControllerBase {
  constructor(protected readonly service: ObjectCountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ObjectCount })
  async createObjectCount(
    @common.Body() data: ObjectCountCreateInput
  ): Promise<ObjectCount> {
    return await this.service.createObjectCount({
      data: {
        ...data,

        image: data.image
          ? {
              connect: data.image,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        objectName: true,
        count: true,

        image: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ObjectCount] })
  @ApiNestedQuery(ObjectCountFindManyArgs)
  async objectCounts(@common.Req() request: Request): Promise<ObjectCount[]> {
    const args = plainToClass(ObjectCountFindManyArgs, request.query);
    return this.service.objectCounts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        objectName: true,
        count: true,

        image: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ObjectCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async objectCount(
    @common.Param() params: ObjectCountWhereUniqueInput
  ): Promise<ObjectCount | null> {
    const result = await this.service.objectCount({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        objectName: true,
        count: true,

        image: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ObjectCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateObjectCount(
    @common.Param() params: ObjectCountWhereUniqueInput,
    @common.Body() data: ObjectCountUpdateInput
  ): Promise<ObjectCount | null> {
    try {
      return await this.service.updateObjectCount({
        where: params,
        data: {
          ...data,

          image: data.image
            ? {
                connect: data.image,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          objectName: true,
          count: true,

          image: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ObjectCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteObjectCount(
    @common.Param() params: ObjectCountWhereUniqueInput
  ): Promise<ObjectCount | null> {
    try {
      return await this.service.deleteObjectCount({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          objectName: true,
          count: true,

          image: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
