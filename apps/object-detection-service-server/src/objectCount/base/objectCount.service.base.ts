/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ObjectCount as PrismaObjectCount,
  Image as PrismaImage,
} from "@prisma/client";

export class ObjectCountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ObjectCountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.objectCount.count(args);
  }

  async objectCounts(
    args: Prisma.ObjectCountFindManyArgs
  ): Promise<PrismaObjectCount[]> {
    return this.prisma.objectCount.findMany(args);
  }
  async objectCount(
    args: Prisma.ObjectCountFindUniqueArgs
  ): Promise<PrismaObjectCount | null> {
    return this.prisma.objectCount.findUnique(args);
  }
  async createObjectCount(
    args: Prisma.ObjectCountCreateArgs
  ): Promise<PrismaObjectCount> {
    return this.prisma.objectCount.create(args);
  }
  async updateObjectCount(
    args: Prisma.ObjectCountUpdateArgs
  ): Promise<PrismaObjectCount> {
    return this.prisma.objectCount.update(args);
  }
  async deleteObjectCount(
    args: Prisma.ObjectCountDeleteArgs
  ): Promise<PrismaObjectCount> {
    return this.prisma.objectCount.delete(args);
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.objectCount
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }
}
